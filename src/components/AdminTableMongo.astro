---
const {type, form} = Astro.props;

---

<!DOCTYPE html>
<div class=" flex flex-col " data-type={type}> 
    <div id="container" class="flex flex-col items-end">
        <div class="mb-4 self-center sm:self-end sm:mr-20">
            <a href = {form} class="bg-white right-0 h-9 w-full mr-12 rounded p-2 hover:bg-blue-900 hover:text-white ease-in-out duration-200">Add {type}</a>
        </div>
        <div class="tableContainer w-full flex items-center justify-center">
            <table class="bg-white w-full sm:w-11/12">
                <thead class="text-xs text-black uppercase bg-gray-200 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th scope="col" class="w-1/12 px-6 py-3">ID</th>
                        <th scope="col" class="w-8/12 px-6 py-3">Title</th>
                        <th scope="col" class="w-3/12 px-6 py-3">Action</th>
                      </tr>
                </thead>
                <tbody>
                
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>

    let collection = [];
   
    const container = document.querySelector('div[data-type]');
    const uptype = container.getAttribute('data-type');
    const type = container.getAttribute('data-type').toLowerCase();
    const url = '/' + type;
    
    async function fetchData() {

        try {
            const response = await fetch(url);
            if (response.ok) {
                collection = await response.json();
                updateTable();
            } else {
                console.error('Failed to fetch data:', response.statusText);
            }
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    function updateTable() {

        let counter = 1;
        const tableBody = document.querySelector('tbody');
        tableBody.innerHTML = '';
        collection.forEach(item => {
            const row = document.createElement('tr');
            row.classList.add('bg-white', 'border-b', 'border-r', 'hover:bg-gray-50');
            
            const idCell = document.createElement('th');
            idCell.scope = 'row';
            idCell.classList.add('px-6', 'py-4', 'whitespace-nowrap');
            idCell.textContent = counter.toString();
            counter++;

            const titleCell = document.createElement('th');
            titleCell.classList.add('text-left');
            titleCell.textContent = item.title;
            
            const actionCell = document.createElement('th');
            actionCell.classList.add('flex', 'items-center', 'justify-center');
            
            if(item.published == 0){
                actionCell.innerHTML = `
                    <div class="flex flex-col flex-wrap justify-evenly sm:flex-row gap-4 py-4">
                        <button id = "edit${type}-${item._id}" data-id="${item._id}" class="text-blue-600 hover:underline-offset-2 hover:underline">Edit</button>
                        <button id = "delete${type}-${item._id}" data-id="${item._id}" class="text-red-600 hover:underline-offset-2 hover:underline">Delete</button>
                        <button id = "publish${type}-${item._id}" data-id="${item._id}" class="text-green-600 hover:underline-offset-2 hover:underline">Publish</button>
                    </div>`;
            } else {
                actionCell.innerHTML = `
                    <div class="flex flex-col flex-wrap justify-evenly sm:flex-row gap-4 py-4">
                        <button id = "edit${type}-${item._id}" data-id="${item._id}" class="text-blue-600 hover:underline-offset-2 hover:underline">Edit</button>
                        <button id = "delete${type}-${item._id}" data-id="${item._id}" class="text-red-600 hover:underline-offset-2 hover:underline">Delete</button>
                        <button id = "unpublish${type}-${item._id}" data-id="${item._id}" class="text-yellow-600 hover:underline-offset-2 hover:underline">Unpublish</button>       
                    </div>`;
            }

            row.appendChild(idCell);
            row.appendChild(titleCell);
            row.appendChild(actionCell);
            tableBody.appendChild(row);
        });

        const editBtns = document.querySelectorAll(`[id^='edit${type}']`);
        const deleteBtns = document.querySelectorAll(`[id^='delete${type}']`);
        const publishBtns = document.querySelectorAll(`[id^='publish${type}']`);
        const unpublishBtns = document.querySelectorAll(`[id^='unpublish${type}']`);

        editBtns.forEach(btn => {
            btn.addEventListener("click", (e) => {
            const target = e.target as HTMLElement;
            const id = target.dataset.id; // Get the ID from data-id attribute
            window.location.href = `/admin/forms/edit/edit${uptype}/${id}`; // Redirect to the edit page with the ID
        });
        });

        deleteBtns.forEach(btn => {
            btn.addEventListener("click", async (e) => {
            const target = e.target as HTMLElement;
            const id = target.dataset.id; // Get the ID from data-id attribute
        
        if (id) {
            const confirmDelete = confirm("Are you sure you want to delete this item?");
            if (confirmDelete) {
                try {
                    const response = await fetch(`/delete${type}/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const url = '/admin/' + type
                        window.location.href = url; // Or use location.reload() to refresh the page
                    } else {
                        console.log("Error:", response.status);
                        // Optionally handle errors or show a message to the user
                    }
                } catch (err) {
                    console.error("Error:", err);
                    // Optionally handle errors or show a message to the user
                }
            }
        }
    });
});




publishBtns.forEach(btn => {
            btn.addEventListener("click", async (e) => {
            const target = e.target as HTMLElement;
            const id = target.dataset.id; // Get the ID from data-id attribute
        
        if (id) {
            const confirmPublish = confirm("Are you sure you want to publish this item?");
            if (confirmPublish) {
                try {
                    const response = await fetch(`/publish${type}/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Redirect to /admin/news or reload the page to reflect the changes
                        const url = '/admin/' + type
                        window.location.href = url; // Or use location.reload() to refresh the page
                    } else {
                        console.log("Error:", response.status);
                        // Optionally handle errors or show a message to the user
                    }
                } catch (err) {
                    console.error("Error:", err);
                    // Optionally handle errors or show a message to the user
                }
            }
        }
    });
});


unpublishBtns.forEach(btn => {
            btn.addEventListener("click", async (e) => {
            const target = e.target as HTMLElement;
            const id = target.dataset.id; // Get the ID from data-id attribute
        
        if (id) {
            const confirmunPublish = confirm("Are you sure you want to unpublish this item?");
            if (confirmunPublish) {
                try {
                    const response = await fetch(`/unpublish${type}/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        // Redirect to /admin/news or reload the page to reflect the changes
                        const url = '/admin/' + type
                        window.location.href = url; // Or use location.reload() to refresh the page
                    } else {
                        console.log("Error:", response.status);
                        // Optionally handle errors or show a message to the user
                    }
                } catch (err) {
                    console.error("Error:", err);
                    // Optionally handle errors or show a message to the user
                }
            }
        }
    });
});



    }

    document.addEventListener('DOMContentLoaded', () => {
        fetchData();
        setInterval(fetchData, 5000);
    });
    

</script>

